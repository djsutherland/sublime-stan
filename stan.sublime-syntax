%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: Stan
file_extensions:
  - stan
scope: source.stan
contexts:
  main:
    - include: double-slash
    - include: pound-sign
    - include: block-comment
    - match: '^\s*(data|transformed data|parameters|transformed parameters|model|generated quantities|functions)\s*{'
      captures:
        1: keyword.control.block-names.stan
      push:
        - meta_content_scope: meta.block.major.stan
        - match: '}'
          pop: true
        - include: double-slash
        - include: pound-sign
        - include: block-comment
        - include: string
        - include: type
        - include: range
        - include: control-flow
        - include: cpp-conflict
        - include: continuous-distributions
        - include: discrete-distributions
        - include: spec-vals
        - include: math-fns
        - include: other-fns
        - include: lp
        - include: double-underscore
        - include: vars
        - include: real-a
        - include: real-b
        - include: real-c
        - include: integer
        - include: block
    - match: '[^\s]+(\s*[^\s]+)?'
      scope: invalid.illegal.top-level
  block:
    - match: '{'
      push:
        - meta_content_scope: meta.block.minor.stan
        - match: '}'
          pop: true
        - include: double-slash
        - include: pound-sign
        - include: block-comment
        - include: string
        - include: type
        - include: range
        - include: control-flow
        - include: cpp-conflict
        - include: continuous-distributions
        - include: discrete-distributions
        - include: spec-vals
        - include: math-fns
        - include: other-fns
        - include: lp
        - include: double-underscore
        - include: vars
        - include: real-a
        - include: real-b
        - include: real-c
        - include: integer
        - include: block
  block-comment:
    - match: /\*
      push:
        - meta_scope: comment.block.slashes
        - match: \*/
          pop: true
  continuous-distributions:
    - match: \b((normal|exp_mod_normal|skew_normal|student_t|cauchy|double_exponential|logistic|gumbel|lognormal|chi_square|inv_chi_square|scaled_inv_chi_square|exponential|gamma|inv_gamma|weibull|frechet|rayleigh|pareto|pareto_type_2|beta|uniform)(_lpdf|_cdf|_lcdf|_lccdf|_rng)?|(von_mises|multi_normal|multi_normal_cholesky|multi_student_t|dirichlet|lkj_corr|lkj_corr_cholesky|wishart|inv_wishart)(_lpdf|_rng)?|(wiener|multi_normal_prec|multi_gp|multi_gp_cholesky|gaussian_dlm_obs)(_lpdf)?)\b
      scope: support.function.distribution.pdf.stan
  control-flow:
    - match: \b(for|in|while|repeat|until|if|then|else|return)\b
      scope: keyword.control.stan
  cpp-conflict:
    - match: \b(alignas|alignof|and|and_eq|asm|auto|bitand|bitor|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|false|float|friend|goto|if|inline|long|mutable|namespace|new|noexcept|not|not_eq|nullptr|operator|or|or_eq|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|true|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while|xor|xor_eq)\b
      comment: reserved words in C++ that are invalid in Stan
      scope: invalid.illegal.cpp-conflict.stan
  discrete-distributions:
    - match: \b((bernoulli|binomial|beta_binomial|neg_binomial|neg_binomial_2|poisson)(_lpmf|_cdf|_lcdf|_lccdf|_rng)?|(bernoulli_logit|binomial_logit|hypergeometric|categorical|categorical_logit|ordered_logistic|neg_binomial_2_log|poisson_log|multinomial)(_lpmf|_rng)?)\b
      scope: support.function.distribution.pdf.stan
  double-slash:
    - match: //.*$
      scope: comment.line.double-slash.stan
  double-underscore:
    - match: '\b[a-zA-Z][a-zA-Z0-9_]*__\b'
      scope: invalid.illegal.variable.double-underscore.stan
  integer:
    - match: '-?(0|[1-9]\d*)'
      scope: constant.numeric.integer.stan
  lp:
    - match: \b(target|get_lp)\b
      scope: variable.language.logprob.stan
  math-fns:
    - match: \b(abs|int_step|min|max|pi|e|sqrt2|step|is_inf|is_nan|fabs|fdim|fmin|fmax|fmod|floor|ceil|round|trunc|sqrt|cbrt|square|exp|exp2|log|log2|log10|pow|inv|inv_sqrt|inv_square|hypot|cos|sin|tan|acos|asin|atan|atan2|cosh|sinh|tanh|acosh|asinh|atanh|logit|inv_logit|inv_cloglog|erf|erfc|Phi|inv_Phi|Phi_approx|binary_log_loss|owens_t|inc_beta|lbeta|tgamma|lgamma|digamma|trigamma|lmgamma|gamma_p|gamma_q|binomial_coefficient_log|choose|bessel_first_kind|bessel_second_kind|modified_bessel_first_kind|modified_bessel_second_kind|falling_factorial|lchoose|log_falling_factorial|rising_factorial|log_rising_factorial|expm1|fma|multiply_log|lmultiply|log1p|log1m|log1p_exp|log1m_exp|log_dif_exp|log_mix|log_sum_exp|log_inv_logit|log1m_inv_logit|sum|prod|mean|variance|sd|distance|squared_distance|dims|num_elements|size|rep_array|sort_asc|sort_desc|sort_indices_asc|sort_indices_desc|rank|rows|cols|dot_product|columns_dot_product|rows_dot_product|dot_self|columns_dot_self|rows_dot_self|tcrossprod|crossprod|quad_form|quad_form_diag|quad_form_sym|trace_quad_form|trace_gen_quad_form|multiply_lower_tri_self_transpose|diag_pre_multiply|diag_post_multiply|rep_vector|rep_row_vector|rep_matrix|diagonal|diag_matrix|block|sub_col|sub_row|head|tail|segment|append_col|append_row|softmax|log_softmax|cumulative_sum|cov_exp_quad|mdivide_left_tri_low|mdivide_right_tri_low|mdivide_left_spd|mdivide_right_spd|matrix_exp|trace|determinant|log_determinant|inverse|inverse_spd|eigenvalues_sym|eigenvectors_sym|qr_Q|qr_R|cholesky_decompose|singular_values|csr_extract_w|csr_extract_v|csr_extract_u|csr_to_dense_matrix|csr_matrix_times_vector|to_matrix|to_vector|to_row_vector|to_array_2d|to_array_1d|algebra_solver|integrate_ode_rk45|integrate_ode|integrate_ode_bdf|)\b
      scope: support.function.math.stan
  other-fns:
    - match: \bprint\b
      scope: support.function.other.stan
  pound-sign:
    - match: '#.*$'
      scope: comment.line.number-sign.stan
  range:
    - match: \b(lower|upper)\b
      scope: keyword.other.range.stan
  real-a:
    - match: '-?(0|[1-9]\d*)?\.\d+([eE]-?(0|[1-9]\d*))?'
      comment: have a point with numbers after, maybe an exponent
      scope: constant.numeric.real.stan
  real-b:
    - match: '-?(0|[1-9]\d*)\.\d*([eE]-?(0|[1-9]\d*))?'
      comment: have a point with numbers before, maybe an exponent
      scope: constant.numeric.real.stan
  real-c:
    - match: '-?(0|[1-9]\d*)[eE]-?(0|[1-9]\d*)'
      comment: no point, have an exponent
      scope: constant.numeric.real.stan
  spec-vals:
    - match: \bnot_a_number|positive_infinity|negative_infinity|machine_precision\b
      scope: support.function.special-value.stan
  string:
    - match: '"'
      push:
        - meta_scope: string.quoted.double.stan
        - match: '"'
          pop: true
        - match: '(\p{^ASCII}|\p{Cntrl}|\\)+'
          scope: invalid.illegal.quoted.bad-char.stan
  type:
    - match: \b(int|real|vector|simplex|unit_vector|ordered|positive_ordered|row_vector|matrix|cholesky_factor_corr|cholesky_factor_cov|corr_matrix|cov_matrix)\b
      scope: storage.type.stan
  vars:
    - match: '\b[a-zA-Z][a-zA-Z0-9_]*\b'
      scope: variable.other.stan
